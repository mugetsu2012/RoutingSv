// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RuteoPedidos.Data;

namespace RuteoPedidos.Data.Migrations
{
    [DbContext(typeof(RuteoPedidosContext))]
    [Migration("20200528050710_MigracionInicial")]
    partial class MigracionInicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RuteoPedidos.Core.Model.Cuenta", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("FechaIngreso")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreContacto")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NombreCuenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TelefonoContacto")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("Codigo");

                    b.ToTable("Cuenta");

                    b.HasData(
                        new
                        {
                            Codigo = 1,
                            Activo = true,
                            FechaIngreso = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NombreContacto = "Administrador",
                            NombreCuenta = "Cuenta de pruebas",
                            TelefonoContacto = "22231203"
                        });
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Motoristas.HistoricoUbicacionMotorista", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTimeOffset>("FechaRegistroUbicacion")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IdMotorista")
                        .HasColumnType("int");

                    b.Property<decimal>("Latitud")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Longitud")
                        .HasColumnType("decimal(9,6)");

                    b.HasKey("Codigo");

                    b.HasIndex("IdMotorista");

                    b.ToTable("HistoricoUbicacionMotorista");
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Motoristas.Motorista", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("FechaActualizacionUbicacion")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("FechaIngreso")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IdCuenta")
                        .HasColumnType("int");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("LatitudUltimaUbicacion")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal?>("LongitudUltimaUbicacion")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PlacasVehiculo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TelefonoContacto")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TextoTipoVehiculo")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("TipoVehiculo")
                        .HasColumnType("int");

                    b.HasKey("Codigo");

                    b.HasIndex("IdCuenta");

                    b.HasIndex("IdUsuario")
                        .IsUnique()
                        .HasFilter("[IdUsuario] IS NOT NULL");

                    b.ToTable("Motorista");

                    b.HasData(
                        new
                        {
                            Codigo = 1,
                            Activo = true,
                            FechaIngreso = new DateTimeOffset(new DateTime(2020, 5, 27, 23, 7, 9, 837, DateTimeKind.Unspecified).AddTicks(7994), new TimeSpan(0, -6, 0, 0, 0)),
                            IdCuenta = 1,
                            NombreCompleto = "Juan Perez",
                            PlacasVehiculo = "P8984565",
                            TelefonoContacto = "62789845",
                            TextoTipoVehiculo = "CarroParticular",
                            TipoVehiculo = 1
                        },
                        new
                        {
                            Codigo = 2,
                            Activo = true,
                            FechaActualizacionUbicacion = new DateTimeOffset(new DateTime(2020, 5, 27, 23, 7, 9, 842, DateTimeKind.Unspecified).AddTicks(9835), new TimeSpan(0, -6, 0, 0, 0)),
                            FechaIngreso = new DateTimeOffset(new DateTime(2020, 5, 27, 23, 7, 9, 842, DateTimeKind.Unspecified).AddTicks(9583), new TimeSpan(0, -6, 0, 0, 0)),
                            IdCuenta = 1,
                            LatitudUltimaUbicacion = 13.70383m,
                            LongitudUltimaUbicacion = -89.24804m,
                            NombreCompleto = "Lucas Molina",
                            PlacasVehiculo = "P523478",
                            TelefonoContacto = "62785545",
                            TextoTipoVehiculo = "CarroParticular",
                            TipoVehiculo = 1
                        });
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Tareas.Destino", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FechaIngreso")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IdCuenta")
                        .HasColumnType("int");

                    b.Property<decimal>("LatitudUbicacion")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("LongitudUbicacion")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("TelefonoContacto")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Codigo");

                    b.HasIndex("IdCuenta");

                    b.ToTable("Destino");
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Tareas.HistoricoTareasOrdenamiento", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoTareasInvolucradas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FechaIngreso")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IdMotorista")
                        .HasColumnType("int");

                    b.HasKey("Codigo");

                    b.HasIndex("IdMotorista");

                    b.ToTable("HistoricoTareasOrdenamiento");
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Tareas.Tarea", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DestinoCliente")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("DetalleTarea")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoTarea")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("FechaAsignacionMotorista")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("FechaIngreso")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("FechaUltimoCambioEstado")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("IdClienteUtilizado")
                        .HasColumnType("int");

                    b.Property<int>("IdCuenta")
                        .HasColumnType("int");

                    b.Property<int?>("IdMotoristaAsignado")
                        .HasColumnType("int");

                    b.Property<string>("Indicaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LatitudUbicacion")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("LongitudUbicacion")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("TelefonoContacto")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TextoEstadoTarea")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Codigo");

                    b.HasIndex("IdClienteUtilizado");

                    b.HasIndex("IdCuenta");

                    b.HasIndex("IdMotoristaAsignado");

                    b.ToTable("Tarea");

                    b.HasData(
                        new
                        {
                            Codigo = 1,
                            DestinoCliente = "Casa numero 5, Colonia Escalon",
                            DetalleTarea = "Llega a Bitworks y entregar una Pizza",
                            EstadoTarea = 0,
                            FechaIngreso = new DateTimeOffset(new DateTime(2020, 5, 23, 15, 10, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IdCuenta = 1,
                            LatitudUbicacion = 13.70672m,
                            LongitudUbicacion = -89.26071m,
                            TelefonoContacto = "22224578",
                            TextoEstadoTarea = "Pendiente"
                        },
                        new
                        {
                            Codigo = 2,
                            DestinoCliente = "Casa Juana en Residencial Sausalito",
                            DetalleTarea = "Tocar la puerta en el porton verde, preguntar por Juana",
                            EstadoTarea = 0,
                            FechaIngreso = new DateTimeOffset(new DateTime(2020, 5, 22, 9, 5, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IdCuenta = 1,
                            Indicaciones = "Sarita, Calle Del Mirador, Residencial Sausalito, Colonia Escalón, Distrito Municipal 3, San Salvador",
                            LatitudUbicacion = 13.70914m,
                            LongitudUbicacion = -89.24305m,
                            TelefonoContacto = "65456912",
                            TextoEstadoTarea = "Pendiente"
                        },
                        new
                        {
                            Codigo = 3,
                            DestinoCliente = "Tienda el Pinalito, Tecla",
                            DetalleTarea = "Llegar a la tienda, entregar las pupusas",
                            EstadoTarea = 0,
                            FechaIngreso = new DateTimeOffset(new DateTime(2020, 5, 23, 12, 45, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            IdCuenta = 1,
                            Indicaciones = "Tienda El Pinalito, Calle Jose Ciriaco López, Barrio El Centro, Santa Tecla, La Libertad, 1501, El Salvador",
                            LatitudUbicacion = 13.67447m,
                            LongitudUbicacion = -89.24305m,
                            TelefonoContacto = "74123697",
                            TextoEstadoTarea = "Pendiente"
                        });
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Tareas.Visita", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("FechaIngreso")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IdTarea")
                        .HasColumnType("int");

                    b.Property<int>("ResultadoVisita")
                        .HasColumnType("int");

                    b.Property<string>("TextoResultadoVisita")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Codigo");

                    b.HasIndex("IdTarea");

                    b.ToTable("Visita");
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Usuario", b =>
                {
                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset>("FechaIngreso")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("IdCuenta")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("IdUsuario");

                    b.HasIndex("IdCuenta");

                    b.HasIndex("Email", "IdCuenta")
                        .IsUnique();

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            IdUsuario = "admin",
                            Activo = true,
                            Apellido = "Magic",
                            Email = "alexanderortiz333@gmail.com",
                            FechaIngreso = new DateTimeOffset(new DateTime(2020, 5, 27, 23, 7, 9, 847, DateTimeKind.Unspecified).AddTicks(225), new TimeSpan(0, -6, 0, 0, 0)),
                            IdCuenta = 1,
                            Nombre = "Administrador",
                            Password = new byte[] { 233, 122, 94, 60, 23, 182, 90, 255, 14, 13, 91, 177, 163, 58, 136, 30 }
                        });
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Motoristas.HistoricoUbicacionMotorista", b =>
                {
                    b.HasOne("RuteoPedidos.Core.Model.Motoristas.Motorista", "Motorista")
                        .WithMany()
                        .HasForeignKey("IdMotorista")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Motoristas.Motorista", b =>
                {
                    b.HasOne("RuteoPedidos.Core.Model.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("IdCuenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RuteoPedidos.Core.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Tareas.Destino", b =>
                {
                    b.HasOne("RuteoPedidos.Core.Model.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("IdCuenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Tareas.HistoricoTareasOrdenamiento", b =>
                {
                    b.HasOne("RuteoPedidos.Core.Model.Motoristas.Motorista", "Motorista")
                        .WithMany()
                        .HasForeignKey("IdMotorista")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Tareas.Tarea", b =>
                {
                    b.HasOne("RuteoPedidos.Core.Model.Tareas.Destino", "Destino")
                        .WithMany()
                        .HasForeignKey("IdClienteUtilizado");

                    b.HasOne("RuteoPedidos.Core.Model.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("IdCuenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RuteoPedidos.Core.Model.Motoristas.Motorista", "Motorista")
                        .WithMany()
                        .HasForeignKey("IdMotoristaAsignado");
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Tareas.Visita", b =>
                {
                    b.HasOne("RuteoPedidos.Core.Model.Tareas.Tarea", "Tarea")
                        .WithMany()
                        .HasForeignKey("IdTarea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RuteoPedidos.Core.Model.Usuario", b =>
                {
                    b.HasOne("RuteoPedidos.Core.Model.Cuenta", "Cuenta")
                        .WithMany()
                        .HasForeignKey("IdCuenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
